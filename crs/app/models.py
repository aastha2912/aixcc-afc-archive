# generated by fastapi-codegen:
#   filename:  competition-openapi.json
#   timestamp: 2025-03-20T07:45:21+00:00

from __future__ import annotations

from typing import Any, Dict, Optional, Literal
from uuid import UUID, uuid4

from pydantic import BaseModel, Field, constr, ConfigDict

config_dict = ConfigDict(json_encoders={UUID: str})

Architecture = Literal['x86_64']

Assessment = Literal['correct', 'incorrect']

class BundleSubmission(BaseModel):
    broadcast_sarif_id: Optional[UUID] = None
    description: Optional[str] = Field(
        None,
        description='optional plaintext description of the components of the bundle, such as would be found in a pull request description or bug report',
    )
    freeform_id: Optional[UUID] = None
    patch_id: Optional[UUID] = None
    pov_id: Optional[UUID] = None
    submitted_sarif_id: Optional[UUID] = None
    model_config = config_dict


class Error(BaseModel):
    fields: Optional[Dict[str, str]] = None
    message: str


class FreeformSubmission(BaseModel):
    submission: str = Field(
        ...,
        description='Base64 encoded arbitrary data\n\n2MiB max size before Base64 encoding',
    )
    model_config = config_dict


class POVSubmission(BaseModel):
    architecture: Architecture | str
    engine: constr(max_length=4096) = Field( # type: ignore[reportInvalidTypeForm]
        ...,
        description='Fuzz Tooling Engine that exercises this vuln. Allowable engine values are specified in project.yaml.\n\n4KiB max size',
    )
    fuzzer_name: constr(max_length=4096) = Field( # type: ignore[reportInvalidTypeForm]
        ..., description='Fuzz Tooling fuzzer that exercises this vuln\n\n4KiB max size'
    )
    sanitizer: constr(max_length=4096) = Field( # type: ignore[reportInvalidTypeForm]
        ...,
        description='Fuzz Tooling Sanitizer that exercises this vuln\n\n4KiB max size',
    )
    testcase: str = Field(
        ...,
        description='Base64 encoded vuln trigger\n\n2MiB max size before Base64 encoding',
    )
    model_config = config_dict


class PatchSubmission(BaseModel):
    patch: str = Field(
        ...,
        description='Base64 encoded patch in unified diff format\n\n100KiB max size before Base64 encoding',
    )
    model_config = config_dict


class PingResponse(BaseModel):
    status: str


class SARIFSubmission(BaseModel):
    sarif: Dict[str, Any] = Field(
        ..., description='SARIF object compliant with the provided schema'
    )
    model_config = config_dict


class SarifAssessmentSubmission(BaseModel):
    assessment: Assessment | str
    description: constr(max_length=131072) = Field( # type: ignore[reportInvalidTypeForm]
        ..., description='Plain text reasoning for the assessment\n\n128KiB max size'
    )
    model_config = config_dict


SubmissionStatus = Literal['accepted', 'passed', 'failed', 'deadline_exceeded', 'errored']


class BundleSubmissionResponse(BaseModel):
    bundle_id: UUID
    status: SubmissionStatus
    model_config = config_dict

    def id(self): return self.bundle_id


class BundleSubmissionResponseVerbose(BaseModel):
    broadcast_sarif_id: Optional[UUID] = None
    bundle_id: UUID
    description: Optional[str] = None
    freeform_id: Optional[UUID] = None
    patch_id: Optional[UUID] = None
    pov_id: Optional[UUID] = None
    status: SubmissionStatus
    submitted_sarif_id: Optional[UUID] = None
    model_config = config_dict

    def id(self): return self.bundle_id


class FreeformResponse(BaseModel):
    freeform_id: UUID
    status: SubmissionStatus
    model_config = config_dict

    def id(self): return self.freeform_id


class POVSubmissionResponse(BaseModel):
    pov_id: UUID
    status: SubmissionStatus
    model_config = config_dict

    def id(self): return self.pov_id

class PatchSubmissionResponse(BaseModel):
    functionality_tests_passing: Optional[bool] = Field(
        None, description='null indicates the tests have not been run'
    )
    patch_id: UUID
    status: SubmissionStatus
    model_config = config_dict

    def id(self): return self.patch_id


class SARIFSubmissionResponse(BaseModel):
    status: SubmissionStatus
    submitted_sarif_id: UUID
    model_config = config_dict

    def id(self): return self.submitted_sarif_id

class SarifAssessmentResponse(BaseModel):
    status: SubmissionStatus
    model_config = config_dict
    sarif_id: UUID = Field(default=uuid4()) # default value because the API doesn't return it, but we override it

    def id(self): return self.sarif_id