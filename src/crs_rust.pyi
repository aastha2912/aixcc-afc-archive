from typing import Any, Callable, Union, List
import os

ContextFn = Callable[[], dict[str, Any]]

class Logger:
    def configure(self, level: str | int, path: os.PathLike[Any], context_fn: ContextFn) -> None: ...
    def set_level(self, level: str | int) -> None: ...

    def debug(self, text: str, **kwargs: Any) -> None: ...
    def info(self, text: str, **kwargs: Any) -> None: ...
    def warning(self, text: str, **kwargs: Any) -> None: ...
    def error(self, text: str, **kwargs: Any) -> None: ...
    def critical(self, text: str, **kwargs: Any) -> None: ...
    def exception(self, text: str, exception: Any | None = None, **kwargs: Any) -> None: ...

    def forward_log(self, level: int, text: str, depth: int, exception: Any | None) -> None: ...
    def log(self, level: int, text: str, **kwargs: Any) -> None: ...

logger: Logger

class Edit:
    file: str
    lines: tuple[int, int]
    old_lines: tuple[int, int]
    before: list[bytes]
    after: list[bytes]
    old_context: str | None
    new_context: str | None

def sw_align(a: bytes, b: bytes, est_line: int | None) -> list[tuple[int | None, int | None]]: ...
def compute_edit(relpath: str, a: bytes, b: bytes) -> Edit: ...

class Counter:
    def add(self, value: float, tags: dict[str, str] | None = None) -> None: ...

class Gauge:
    def set(self, value: float, tags: dict[str, str] | None = None) -> None: ...

class Metrics:
    def __init__(self, url: str | None, bucket: str, tags: dict[str, str]): ...
    def create_counter(self, name: str) -> Counter: ...
    def create_gauge(self, name: str) -> Gauge: ...
    def report(self, name: str, fields: dict[str, float], tags: dict[str, str] | None = None) -> None: ...

class PathSuffixTree:
    """
    Native suffix-tree used by CRS.

    The constructor accepts raw JSON bytes (or, for legacy code, the
    still-supported nested‐dict object).
    """

    def __init__(self, json: bytes | bytearray | memoryview): ...
    def normalize_path(self, path: str) -> str: ...
    def check_path(self, path: str) -> None: ...
    def get_full_paths(self, partial: str) -> List[str]: ...
    def all_paths(self) -> List[str]: ...